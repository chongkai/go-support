// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cloudstate/function.proto

package protocol

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FunctionCommand struct {
	// The name of the service this function is on.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Command name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The command payload.
	Payload              *any.Any `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FunctionCommand) Reset()         { *m = FunctionCommand{} }
func (m *FunctionCommand) String() string { return proto.CompactTextString(m) }
func (*FunctionCommand) ProtoMessage()    {}
func (*FunctionCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_876d54e6158c20c4, []int{0}
}

func (m *FunctionCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FunctionCommand.Unmarshal(m, b)
}
func (m *FunctionCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FunctionCommand.Marshal(b, m, deterministic)
}
func (m *FunctionCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionCommand.Merge(m, src)
}
func (m *FunctionCommand) XXX_Size() int {
	return xxx_messageInfo_FunctionCommand.Size(m)
}
func (m *FunctionCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionCommand.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionCommand proto.InternalMessageInfo

func (m *FunctionCommand) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *FunctionCommand) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FunctionCommand) GetPayload() *any.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

type FunctionReply struct {
	// Types that are valid to be assigned to Response:
	//	*FunctionReply_Reply
	//	*FunctionReply_Forward
	Response             isFunctionReply_Response `protobuf_oneof:"response"`
	SideEffects          []*SideEffect            `protobuf:"bytes,4,rep,name=side_effects,json=sideEffects,proto3" json:"side_effects,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *FunctionReply) Reset()         { *m = FunctionReply{} }
func (m *FunctionReply) String() string { return proto.CompactTextString(m) }
func (*FunctionReply) ProtoMessage()    {}
func (*FunctionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_876d54e6158c20c4, []int{1}
}

func (m *FunctionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FunctionReply.Unmarshal(m, b)
}
func (m *FunctionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FunctionReply.Marshal(b, m, deterministic)
}
func (m *FunctionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionReply.Merge(m, src)
}
func (m *FunctionReply) XXX_Size() int {
	return xxx_messageInfo_FunctionReply.Size(m)
}
func (m *FunctionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionReply.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionReply proto.InternalMessageInfo

type isFunctionReply_Response interface {
	isFunctionReply_Response()
}

type FunctionReply_Reply struct {
	Reply *Reply `protobuf:"bytes,2,opt,name=reply,proto3,oneof"`
}

type FunctionReply_Forward struct {
	Forward *Forward `protobuf:"bytes,3,opt,name=forward,proto3,oneof"`
}

func (*FunctionReply_Reply) isFunctionReply_Response() {}

func (*FunctionReply_Forward) isFunctionReply_Response() {}

func (m *FunctionReply) GetResponse() isFunctionReply_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *FunctionReply) GetReply() *Reply {
	if x, ok := m.GetResponse().(*FunctionReply_Reply); ok {
		return x.Reply
	}
	return nil
}

func (m *FunctionReply) GetForward() *Forward {
	if x, ok := m.GetResponse().(*FunctionReply_Forward); ok {
		return x.Forward
	}
	return nil
}

func (m *FunctionReply) GetSideEffects() []*SideEffect {
	if m != nil {
		return m.SideEffects
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FunctionReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FunctionReply_Reply)(nil),
		(*FunctionReply_Forward)(nil),
	}
}

func init() {
	proto.RegisterType((*FunctionCommand)(nil), "cloudstate.function.FunctionCommand")
	proto.RegisterType((*FunctionReply)(nil), "cloudstate.function.FunctionReply")
}

func init() { proto.RegisterFile("cloudstate/function.proto", fileDescriptor_876d54e6158c20c4) }

var fileDescriptor_876d54e6158c20c4 = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x4f, 0xaf, 0xd2, 0x40,
	0x14, 0xc5, 0xa9, 0xa0, 0xe8, 0x2d, 0xfe, 0x61, 0x30, 0x08, 0xac, 0xb0, 0x71, 0x51, 0x17, 0x4e,
	0x49, 0x5d, 0xb9, 0x14, 0x23, 0xc1, 0x8d, 0x26, 0x25, 0x2e, 0x74, 0x03, 0x43, 0xe7, 0x16, 0x9b,
	0xb4, 0x33, 0xcd, 0xcc, 0x54, 0xed, 0x07, 0xf1, 0x8b, 0xf8, 0x09, 0x5f, 0x98, 0xd2, 0xf7, 0xca,
	0xcb, 0xcb, 0x5b, 0xb1, 0x3b, 0x99, 0xf3, 0x9b, 0x7b, 0xce, 0xed, 0x1f, 0x98, 0xc6, 0x99, 0x2c,
	0xb9, 0x36, 0xcc, 0x60, 0x90, 0x94, 0x22, 0x36, 0xa9, 0x14, 0xb4, 0x50, 0xd2, 0x48, 0x32, 0xba,
	0xb1, 0x68, 0x63, 0xcd, 0xa6, 0x07, 0x29, 0x0f, 0x19, 0x06, 0x16, 0xd9, 0x97, 0x49, 0xc0, 0x44,
	0x55, 0xf3, 0xb3, 0x57, 0xad, 0x51, 0x28, 0x4c, 0x6a, 0x4e, 0x86, 0xf7, 0x17, 0x9e, 0xaf, 0x4e,
	0xf7, 0x3f, 0xc9, 0x3c, 0x67, 0x82, 0x93, 0xd7, 0x30, 0xd0, 0xa8, 0x7e, 0xa7, 0x31, 0x6e, 0x05,
	0xcb, 0x71, 0xf2, 0x60, 0xee, 0xf8, 0x4f, 0x22, 0xf7, 0x74, 0xf6, 0x95, 0xe5, 0x48, 0x08, 0xf4,
	0xac, 0xd5, 0xb5, 0x96, 0xd5, 0x84, 0x42, 0xbf, 0x60, 0x55, 0x26, 0x19, 0x9f, 0xf4, 0xe6, 0x8e,
	0xef, 0x86, 0x2f, 0x69, 0xdd, 0x87, 0x36, 0x7d, 0xe8, 0x47, 0x51, 0x45, 0x0d, 0xe4, 0xfd, 0x77,
	0xe0, 0x69, 0x13, 0x1d, 0x61, 0x91, 0x55, 0xe4, 0x2d, 0x3c, 0x54, 0x47, 0x61, 0x13, 0xdd, 0x70,
	0x48, 0x5b, 0x4b, 0x5a, 0x62, 0xdd, 0x89, 0x6a, 0x82, 0x04, 0xd0, 0x4f, 0xa4, 0xfa, 0xc3, 0x14,
	0xb7, 0x1d, 0xdc, 0x70, 0xd4, 0x86, 0x57, 0xb5, 0xb5, 0xee, 0x44, 0x0d, 0x45, 0x3e, 0xc0, 0x40,
	0xa7, 0x1c, 0xb7, 0x98, 0x24, 0x18, 0x1b, 0x3d, 0xe9, 0xcd, 0xbb, 0xbe, 0x1b, 0x8e, 0xdb, 0xb7,
	0x36, 0x29, 0xc7, 0xcf, 0xd6, 0x8e, 0x5c, 0x7d, 0xad, 0xf5, 0x12, 0xe0, 0xb1, 0x42, 0x5d, 0x48,
	0xa1, 0x31, 0xfc, 0xd7, 0x85, 0xe1, 0xe6, 0x48, 0x67, 0xa8, 0x75, 0xd3, 0x9e, 0xfc, 0x00, 0xf7,
	0x17, 0x13, 0x3c, 0xc3, 0xef, 0x82, 0xa9, 0x8a, 0xbc, 0xa1, 0x77, 0xbc, 0x1d, 0x7a, 0xeb, 0x31,
	0xcf, 0xbc, 0x7b, 0x29, 0xbb, 0xaf, 0xd7, 0x21, 0x3b, 0x78, 0x51, 0x8f, 0xde, 0x18, 0x85, 0x2c,
	0x47, 0xfe, 0x45, 0x5c, 0x72, 0xbe, 0xef, 0x10, 0x06, 0xc3, 0xf3, 0x84, 0x6f, 0xa5, 0xb9, 0x64,
	0xc4, 0xc2, 0x21, 0x3b, 0x78, 0x76, 0x1e, 0x71, 0xd9, 0x15, 0x16, 0xce, 0xf2, 0x1d, 0x8c, 0x53,
	0xd9, 0xa6, 0xed, 0x37, 0x17, 0xcb, 0xec, 0x67, 0xeb, 0x4f, 0x09, 0x9a, 0xc3, 0xfd, 0x23, 0xab,
	0xde, 0x5f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x25, 0xcb, 0xb1, 0x9a, 0x62, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StatelessFunctionClient is the client API for StatelessFunction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatelessFunctionClient interface {
	HandleUnary(ctx context.Context, in *FunctionCommand, opts ...grpc.CallOption) (*FunctionReply, error)
	HandleStreamedIn(ctx context.Context, opts ...grpc.CallOption) (StatelessFunction_HandleStreamedInClient, error)
	HandleStreamedOut(ctx context.Context, in *FunctionCommand, opts ...grpc.CallOption) (StatelessFunction_HandleStreamedOutClient, error)
	HandleStreamed(ctx context.Context, opts ...grpc.CallOption) (StatelessFunction_HandleStreamedClient, error)
}

type statelessFunctionClient struct {
	cc *grpc.ClientConn
}

func NewStatelessFunctionClient(cc *grpc.ClientConn) StatelessFunctionClient {
	return &statelessFunctionClient{cc}
}

func (c *statelessFunctionClient) HandleUnary(ctx context.Context, in *FunctionCommand, opts ...grpc.CallOption) (*FunctionReply, error) {
	out := new(FunctionReply)
	err := c.cc.Invoke(ctx, "/cloudstate.function.StatelessFunction/handleUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statelessFunctionClient) HandleStreamedIn(ctx context.Context, opts ...grpc.CallOption) (StatelessFunction_HandleStreamedInClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StatelessFunction_serviceDesc.Streams[0], "/cloudstate.function.StatelessFunction/handleStreamedIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &statelessFunctionHandleStreamedInClient{stream}
	return x, nil
}

type StatelessFunction_HandleStreamedInClient interface {
	Send(*FunctionCommand) error
	CloseAndRecv() (*FunctionReply, error)
	grpc.ClientStream
}

type statelessFunctionHandleStreamedInClient struct {
	grpc.ClientStream
}

func (x *statelessFunctionHandleStreamedInClient) Send(m *FunctionCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *statelessFunctionHandleStreamedInClient) CloseAndRecv() (*FunctionReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FunctionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statelessFunctionClient) HandleStreamedOut(ctx context.Context, in *FunctionCommand, opts ...grpc.CallOption) (StatelessFunction_HandleStreamedOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StatelessFunction_serviceDesc.Streams[1], "/cloudstate.function.StatelessFunction/handleStreamedOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &statelessFunctionHandleStreamedOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatelessFunction_HandleStreamedOutClient interface {
	Recv() (*FunctionReply, error)
	grpc.ClientStream
}

type statelessFunctionHandleStreamedOutClient struct {
	grpc.ClientStream
}

func (x *statelessFunctionHandleStreamedOutClient) Recv() (*FunctionReply, error) {
	m := new(FunctionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statelessFunctionClient) HandleStreamed(ctx context.Context, opts ...grpc.CallOption) (StatelessFunction_HandleStreamedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StatelessFunction_serviceDesc.Streams[2], "/cloudstate.function.StatelessFunction/handleStreamed", opts...)
	if err != nil {
		return nil, err
	}
	x := &statelessFunctionHandleStreamedClient{stream}
	return x, nil
}

type StatelessFunction_HandleStreamedClient interface {
	Send(*FunctionCommand) error
	Recv() (*FunctionReply, error)
	grpc.ClientStream
}

type statelessFunctionHandleStreamedClient struct {
	grpc.ClientStream
}

func (x *statelessFunctionHandleStreamedClient) Send(m *FunctionCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *statelessFunctionHandleStreamedClient) Recv() (*FunctionReply, error) {
	m := new(FunctionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatelessFunctionServer is the server API for StatelessFunction service.
type StatelessFunctionServer interface {
	HandleUnary(context.Context, *FunctionCommand) (*FunctionReply, error)
	HandleStreamedIn(StatelessFunction_HandleStreamedInServer) error
	HandleStreamedOut(*FunctionCommand, StatelessFunction_HandleStreamedOutServer) error
	HandleStreamed(StatelessFunction_HandleStreamedServer) error
}

// UnimplementedStatelessFunctionServer can be embedded to have forward compatible implementations.
type UnimplementedStatelessFunctionServer struct {
}

func (*UnimplementedStatelessFunctionServer) HandleUnary(ctx context.Context, req *FunctionCommand) (*FunctionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUnary not implemented")
}
func (*UnimplementedStatelessFunctionServer) HandleStreamedIn(srv StatelessFunction_HandleStreamedInServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleStreamedIn not implemented")
}
func (*UnimplementedStatelessFunctionServer) HandleStreamedOut(req *FunctionCommand, srv StatelessFunction_HandleStreamedOutServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleStreamedOut not implemented")
}
func (*UnimplementedStatelessFunctionServer) HandleStreamed(srv StatelessFunction_HandleStreamedServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleStreamed not implemented")
}

func RegisterStatelessFunctionServer(s *grpc.Server, srv StatelessFunctionServer) {
	s.RegisterService(&_StatelessFunction_serviceDesc, srv)
}

func _StatelessFunction_HandleUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatelessFunctionServer).HandleUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudstate.function.StatelessFunction/HandleUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatelessFunctionServer).HandleUnary(ctx, req.(*FunctionCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatelessFunction_HandleStreamedIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StatelessFunctionServer).HandleStreamedIn(&statelessFunctionHandleStreamedInServer{stream})
}

type StatelessFunction_HandleStreamedInServer interface {
	SendAndClose(*FunctionReply) error
	Recv() (*FunctionCommand, error)
	grpc.ServerStream
}

type statelessFunctionHandleStreamedInServer struct {
	grpc.ServerStream
}

func (x *statelessFunctionHandleStreamedInServer) SendAndClose(m *FunctionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *statelessFunctionHandleStreamedInServer) Recv() (*FunctionCommand, error) {
	m := new(FunctionCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StatelessFunction_HandleStreamedOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FunctionCommand)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatelessFunctionServer).HandleStreamedOut(m, &statelessFunctionHandleStreamedOutServer{stream})
}

type StatelessFunction_HandleStreamedOutServer interface {
	Send(*FunctionReply) error
	grpc.ServerStream
}

type statelessFunctionHandleStreamedOutServer struct {
	grpc.ServerStream
}

func (x *statelessFunctionHandleStreamedOutServer) Send(m *FunctionReply) error {
	return x.ServerStream.SendMsg(m)
}

func _StatelessFunction_HandleStreamed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StatelessFunctionServer).HandleStreamed(&statelessFunctionHandleStreamedServer{stream})
}

type StatelessFunction_HandleStreamedServer interface {
	Send(*FunctionReply) error
	Recv() (*FunctionCommand, error)
	grpc.ServerStream
}

type statelessFunctionHandleStreamedServer struct {
	grpc.ServerStream
}

func (x *statelessFunctionHandleStreamedServer) Send(m *FunctionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *statelessFunctionHandleStreamedServer) Recv() (*FunctionCommand, error) {
	m := new(FunctionCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StatelessFunction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstate.function.StatelessFunction",
	HandlerType: (*StatelessFunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "handleUnary",
			Handler:    _StatelessFunction_HandleUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "handleStreamedIn",
			Handler:       _StatelessFunction_HandleStreamedIn_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "handleStreamedOut",
			Handler:       _StatelessFunction_HandleStreamedOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "handleStreamed",
			Handler:       _StatelessFunction_HandleStreamed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cloudstate/function.proto",
}
