// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: crdts/crdt-example.proto

package crdts

import (
	context "context"
	_ "github.com/cloudstateio/go-support/cloudstate"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UpdateCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UpdateCounter) Reset() {
	*x = UpdateCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdts_crdt_example_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCounter) ProtoMessage() {}

func (x *UpdateCounter) ProtoReflect() protoreflect.Message {
	mi := &file_crdts_crdt_example_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCounter.ProtoReflect.Descriptor instead.
func (*UpdateCounter) Descriptor() ([]byte, []int) {
	return file_crdts_crdt_example_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateCounter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UpdateCounter) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type CounterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CounterValue) Reset() {
	*x = CounterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdts_crdt_example_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterValue) ProtoMessage() {}

func (x *CounterValue) ProtoReflect() protoreflect.Message {
	mi := &file_crdts_crdt_example_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterValue.ProtoReflect.Descriptor instead.
func (*CounterValue) Descriptor() ([]byte, []int) {
	return file_crdts_crdt_example_proto_rawDescGZIP(), []int{1}
}

func (x *CounterValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Get struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Get) Reset() {
	*x = Get{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdts_crdt_example_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Get) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Get) ProtoMessage() {}

func (x *Get) ProtoReflect() protoreflect.Message {
	mi := &file_crdts_crdt_example_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Get.ProtoReflect.Descriptor instead.
func (*Get) Descriptor() ([]byte, []int) {
	return file_crdts_crdt_example_proto_rawDescGZIP(), []int{2}
}

func (x *Get) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SomeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *SomeValue) Reset() {
	*x = SomeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdts_crdt_example_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SomeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeValue) ProtoMessage() {}

func (x *SomeValue) ProtoReflect() protoreflect.Message {
	mi := &file_crdts_crdt_example_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeValue.ProtoReflect.Descriptor instead.
func (*SomeValue) Descriptor() ([]byte, []int) {
	return file_crdts_crdt_example_proto_rawDescGZIP(), []int{3}
}

func (x *SomeValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SomeValue) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type MutateSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Clear  bool         `protobuf:"varint,2,opt,name=clear,proto3" json:"clear,omitempty"`
	Remove []*SomeValue `protobuf:"bytes,3,rep,name=remove,proto3" json:"remove,omitempty"`
	Add    []*SomeValue `protobuf:"bytes,4,rep,name=add,proto3" json:"add,omitempty"`
}

func (x *MutateSet) Reset() {
	*x = MutateSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdts_crdt_example_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateSet) ProtoMessage() {}

func (x *MutateSet) ProtoReflect() protoreflect.Message {
	mi := &file_crdts_crdt_example_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateSet.ProtoReflect.Descriptor instead.
func (*MutateSet) Descriptor() ([]byte, []int) {
	return file_crdts_crdt_example_proto_rawDescGZIP(), []int{4}
}

func (x *MutateSet) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MutateSet) GetClear() bool {
	if x != nil {
		return x.Clear
	}
	return false
}

func (x *MutateSet) GetRemove() []*SomeValue {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *MutateSet) GetAdd() []*SomeValue {
	if x != nil {
		return x.Add
	}
	return nil
}

type SetSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size int32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *SetSize) Reset() {
	*x = SetSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdts_crdt_example_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSize) ProtoMessage() {}

func (x *SetSize) ProtoReflect() protoreflect.Message {
	mi := &file_crdts_crdt_example_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSize.ProtoReflect.Descriptor instead.
func (*SetSize) Descriptor() ([]byte, []int) {
	return file_crdts_crdt_example_proto_rawDescGZIP(), []int{5}
}

func (x *SetSize) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type SetValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SomeValue `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SetValue) Reset() {
	*x = SetValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdts_crdt_example_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetValue) ProtoMessage() {}

func (x *SetValue) ProtoReflect() protoreflect.Message {
	mi := &file_crdts_crdt_example_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetValue.ProtoReflect.Descriptor instead.
func (*SetValue) Descriptor() ([]byte, []int) {
	return file_crdts_crdt_example_proto_rawDescGZIP(), []int{6}
}

func (x *SetValue) GetItems() []*SomeValue {
	if x != nil {
		return x.Items
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdts_crdt_example_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_crdts_crdt_example_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_crdts_crdt_example_proto_rawDescGZIP(), []int{7}
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type OnlineStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online bool `protobuf:"varint,1,opt,name=online,proto3" json:"online,omitempty"`
}

func (x *OnlineStatus) Reset() {
	*x = OnlineStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdts_crdt_example_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineStatus) ProtoMessage() {}

func (x *OnlineStatus) ProtoReflect() protoreflect.Message {
	mi := &file_crdts_crdt_example_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineStatus.ProtoReflect.Descriptor instead.
func (*OnlineStatus) Descriptor() ([]byte, []int) {
	return file_crdts_crdt_example_proto_rawDescGZIP(), []int{8}
}

func (x *OnlineStatus) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

var File_crdts_crdt_example_proto protoreflect.FileDescriptor

var file_crdts_crdt_example_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x72, 0x64, 0x74, 0x73, 0x2f, 0x63, 0x72, 0x64, 0x74, 0x2d, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x73, 0x1a, 0x1b, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3d, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1d, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x3f, 0x0a, 0x09, 0x53,
	0x6f, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a,
	0x09, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x73, 0x2e, 0x53, 0x6f, 0x6d,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x2e,
	0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x73, 0x2e,
	0x53, 0x6f, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x61, 0x64, 0x64, 0x22, 0x1d,
	0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3e, 0x0a,
	0x08, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x73, 0x2e, 0x53, 0x6f, 0x6d,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x20, 0x0a,
	0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x26, 0x0a, 0x0c, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0xe3, 0x05, 0x0a, 0x0b, 0x43, 0x72, 0x64, 0x74,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x46, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64,
	0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x4e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0x1f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x50, 0x4e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65,
	0x47, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x73, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x63, 0x72, 0x64, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3e,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x47, 0x53, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x63, 0x72, 0x64, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47,
	0x0a, 0x0b, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x52, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74,
	0x73, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4f, 0x52,
	0x53, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x30, 0x01, 0x12, 0x45, 0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x63, 0x72, 0x64, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x73, 0x2e, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x30, 0x01, 0x42, 0x0b, 0x5a,
	0x09, 0x74, 0x63, 0x6b, 0x2f, 0x63, 0x72, 0x64, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_crdts_crdt_example_proto_rawDescOnce sync.Once
	file_crdts_crdt_example_proto_rawDescData = file_crdts_crdt_example_proto_rawDesc
)

func file_crdts_crdt_example_proto_rawDescGZIP() []byte {
	file_crdts_crdt_example_proto_rawDescOnce.Do(func() {
		file_crdts_crdt_example_proto_rawDescData = protoimpl.X.CompressGZIP(file_crdts_crdt_example_proto_rawDescData)
	})
	return file_crdts_crdt_example_proto_rawDescData
}

var file_crdts_crdt_example_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_crdts_crdt_example_proto_goTypes = []interface{}{
	(*UpdateCounter)(nil), // 0: com.example.crdts.UpdateCounter
	(*CounterValue)(nil),  // 1: com.example.crdts.CounterValue
	(*Get)(nil),           // 2: com.example.crdts.Get
	(*SomeValue)(nil),     // 3: com.example.crdts.SomeValue
	(*MutateSet)(nil),     // 4: com.example.crdts.MutateSet
	(*SetSize)(nil),       // 5: com.example.crdts.SetSize
	(*SetValue)(nil),      // 6: com.example.crdts.SetValue
	(*User)(nil),          // 7: com.example.crdts.User
	(*OnlineStatus)(nil),  // 8: com.example.crdts.OnlineStatus
	(*empty.Empty)(nil),   // 9: google.protobuf.Empty
}
var file_crdts_crdt_example_proto_depIdxs = []int32{
	3,  // 0: com.example.crdts.MutateSet.remove:type_name -> com.example.crdts.SomeValue
	3,  // 1: com.example.crdts.MutateSet.add:type_name -> com.example.crdts.SomeValue
	3,  // 2: com.example.crdts.SetValue.items:type_name -> com.example.crdts.SomeValue
	0,  // 3: com.example.crdts.CrdtExample.IncrementGCounter:input_type -> com.example.crdts.UpdateCounter
	2,  // 4: com.example.crdts.CrdtExample.GetGCounter:input_type -> com.example.crdts.Get
	0,  // 5: com.example.crdts.CrdtExample.UpdatePNCounter:input_type -> com.example.crdts.UpdateCounter
	2,  // 6: com.example.crdts.CrdtExample.GetPNCounter:input_type -> com.example.crdts.Get
	4,  // 7: com.example.crdts.CrdtExample.MutateGSet:input_type -> com.example.crdts.MutateSet
	2,  // 8: com.example.crdts.CrdtExample.GetGSet:input_type -> com.example.crdts.Get
	4,  // 9: com.example.crdts.CrdtExample.MutateORSet:input_type -> com.example.crdts.MutateSet
	2,  // 10: com.example.crdts.CrdtExample.GetORSet:input_type -> com.example.crdts.Get
	7,  // 11: com.example.crdts.CrdtExample.Connect:input_type -> com.example.crdts.User
	7,  // 12: com.example.crdts.CrdtExample.Monitor:input_type -> com.example.crdts.User
	1,  // 13: com.example.crdts.CrdtExample.IncrementGCounter:output_type -> com.example.crdts.CounterValue
	1,  // 14: com.example.crdts.CrdtExample.GetGCounter:output_type -> com.example.crdts.CounterValue
	1,  // 15: com.example.crdts.CrdtExample.UpdatePNCounter:output_type -> com.example.crdts.CounterValue
	1,  // 16: com.example.crdts.CrdtExample.GetPNCounter:output_type -> com.example.crdts.CounterValue
	5,  // 17: com.example.crdts.CrdtExample.MutateGSet:output_type -> com.example.crdts.SetSize
	6,  // 18: com.example.crdts.CrdtExample.GetGSet:output_type -> com.example.crdts.SetValue
	5,  // 19: com.example.crdts.CrdtExample.MutateORSet:output_type -> com.example.crdts.SetSize
	6,  // 20: com.example.crdts.CrdtExample.GetORSet:output_type -> com.example.crdts.SetValue
	9,  // 21: com.example.crdts.CrdtExample.Connect:output_type -> google.protobuf.Empty
	8,  // 22: com.example.crdts.CrdtExample.Monitor:output_type -> com.example.crdts.OnlineStatus
	13, // [13:23] is the sub-list for method output_type
	3,  // [3:13] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_crdts_crdt_example_proto_init() }
func file_crdts_crdt_example_proto_init() {
	if File_crdts_crdt_example_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_crdts_crdt_example_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdts_crdt_example_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdts_crdt_example_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Get); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdts_crdt_example_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SomeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdts_crdt_example_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdts_crdt_example_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdts_crdt_example_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdts_crdt_example_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdts_crdt_example_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_crdts_crdt_example_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_crdts_crdt_example_proto_goTypes,
		DependencyIndexes: file_crdts_crdt_example_proto_depIdxs,
		MessageInfos:      file_crdts_crdt_example_proto_msgTypes,
	}.Build()
	File_crdts_crdt_example_proto = out.File
	file_crdts_crdt_example_proto_rawDesc = nil
	file_crdts_crdt_example_proto_goTypes = nil
	file_crdts_crdt_example_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CrdtExampleClient is the client API for CrdtExample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrdtExampleClient interface {
	IncrementGCounter(ctx context.Context, in *UpdateCounter, opts ...grpc.CallOption) (*CounterValue, error)
	GetGCounter(ctx context.Context, in *Get, opts ...grpc.CallOption) (*CounterValue, error)
	UpdatePNCounter(ctx context.Context, in *UpdateCounter, opts ...grpc.CallOption) (*CounterValue, error)
	GetPNCounter(ctx context.Context, in *Get, opts ...grpc.CallOption) (*CounterValue, error)
	MutateGSet(ctx context.Context, in *MutateSet, opts ...grpc.CallOption) (*SetSize, error)
	GetGSet(ctx context.Context, in *Get, opts ...grpc.CallOption) (*SetValue, error)
	MutateORSet(ctx context.Context, in *MutateSet, opts ...grpc.CallOption) (*SetSize, error)
	GetORSet(ctx context.Context, in *Get, opts ...grpc.CallOption) (*SetValue, error)
	// Connect the given user. They will stay connected as long as the stream stays open.
	Connect(ctx context.Context, in *User, opts ...grpc.CallOption) (CrdtExample_ConnectClient, error)
	// Monitor the online status of the given user.
	Monitor(ctx context.Context, in *User, opts ...grpc.CallOption) (CrdtExample_MonitorClient, error)
}

type crdtExampleClient struct {
	cc grpc.ClientConnInterface
}

func NewCrdtExampleClient(cc grpc.ClientConnInterface) CrdtExampleClient {
	return &crdtExampleClient{cc}
}

func (c *crdtExampleClient) IncrementGCounter(ctx context.Context, in *UpdateCounter, opts ...grpc.CallOption) (*CounterValue, error) {
	out := new(CounterValue)
	err := c.cc.Invoke(ctx, "/com.example.crdts.CrdtExample/IncrementGCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crdtExampleClient) GetGCounter(ctx context.Context, in *Get, opts ...grpc.CallOption) (*CounterValue, error) {
	out := new(CounterValue)
	err := c.cc.Invoke(ctx, "/com.example.crdts.CrdtExample/GetGCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crdtExampleClient) UpdatePNCounter(ctx context.Context, in *UpdateCounter, opts ...grpc.CallOption) (*CounterValue, error) {
	out := new(CounterValue)
	err := c.cc.Invoke(ctx, "/com.example.crdts.CrdtExample/UpdatePNCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crdtExampleClient) GetPNCounter(ctx context.Context, in *Get, opts ...grpc.CallOption) (*CounterValue, error) {
	out := new(CounterValue)
	err := c.cc.Invoke(ctx, "/com.example.crdts.CrdtExample/GetPNCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crdtExampleClient) MutateGSet(ctx context.Context, in *MutateSet, opts ...grpc.CallOption) (*SetSize, error) {
	out := new(SetSize)
	err := c.cc.Invoke(ctx, "/com.example.crdts.CrdtExample/MutateGSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crdtExampleClient) GetGSet(ctx context.Context, in *Get, opts ...grpc.CallOption) (*SetValue, error) {
	out := new(SetValue)
	err := c.cc.Invoke(ctx, "/com.example.crdts.CrdtExample/GetGSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crdtExampleClient) MutateORSet(ctx context.Context, in *MutateSet, opts ...grpc.CallOption) (*SetSize, error) {
	out := new(SetSize)
	err := c.cc.Invoke(ctx, "/com.example.crdts.CrdtExample/MutateORSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crdtExampleClient) GetORSet(ctx context.Context, in *Get, opts ...grpc.CallOption) (*SetValue, error) {
	out := new(SetValue)
	err := c.cc.Invoke(ctx, "/com.example.crdts.CrdtExample/GetORSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crdtExampleClient) Connect(ctx context.Context, in *User, opts ...grpc.CallOption) (CrdtExample_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrdtExample_serviceDesc.Streams[0], "/com.example.crdts.CrdtExample/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &crdtExampleConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrdtExample_ConnectClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type crdtExampleConnectClient struct {
	grpc.ClientStream
}

func (x *crdtExampleConnectClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crdtExampleClient) Monitor(ctx context.Context, in *User, opts ...grpc.CallOption) (CrdtExample_MonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrdtExample_serviceDesc.Streams[1], "/com.example.crdts.CrdtExample/Monitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &crdtExampleMonitorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrdtExample_MonitorClient interface {
	Recv() (*OnlineStatus, error)
	grpc.ClientStream
}

type crdtExampleMonitorClient struct {
	grpc.ClientStream
}

func (x *crdtExampleMonitorClient) Recv() (*OnlineStatus, error) {
	m := new(OnlineStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CrdtExampleServer is the server API for CrdtExample service.
type CrdtExampleServer interface {
	IncrementGCounter(context.Context, *UpdateCounter) (*CounterValue, error)
	GetGCounter(context.Context, *Get) (*CounterValue, error)
	UpdatePNCounter(context.Context, *UpdateCounter) (*CounterValue, error)
	GetPNCounter(context.Context, *Get) (*CounterValue, error)
	MutateGSet(context.Context, *MutateSet) (*SetSize, error)
	GetGSet(context.Context, *Get) (*SetValue, error)
	MutateORSet(context.Context, *MutateSet) (*SetSize, error)
	GetORSet(context.Context, *Get) (*SetValue, error)
	// Connect the given user. They will stay connected as long as the stream stays open.
	Connect(*User, CrdtExample_ConnectServer) error
	// Monitor the online status of the given user.
	Monitor(*User, CrdtExample_MonitorServer) error
}

// UnimplementedCrdtExampleServer can be embedded to have forward compatible implementations.
type UnimplementedCrdtExampleServer struct {
}

func (*UnimplementedCrdtExampleServer) IncrementGCounter(context.Context, *UpdateCounter) (*CounterValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementGCounter not implemented")
}
func (*UnimplementedCrdtExampleServer) GetGCounter(context.Context, *Get) (*CounterValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGCounter not implemented")
}
func (*UnimplementedCrdtExampleServer) UpdatePNCounter(context.Context, *UpdateCounter) (*CounterValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePNCounter not implemented")
}
func (*UnimplementedCrdtExampleServer) GetPNCounter(context.Context, *Get) (*CounterValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPNCounter not implemented")
}
func (*UnimplementedCrdtExampleServer) MutateGSet(context.Context, *MutateSet) (*SetSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutateGSet not implemented")
}
func (*UnimplementedCrdtExampleServer) GetGSet(context.Context, *Get) (*SetValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGSet not implemented")
}
func (*UnimplementedCrdtExampleServer) MutateORSet(context.Context, *MutateSet) (*SetSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutateORSet not implemented")
}
func (*UnimplementedCrdtExampleServer) GetORSet(context.Context, *Get) (*SetValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetORSet not implemented")
}
func (*UnimplementedCrdtExampleServer) Connect(*User, CrdtExample_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedCrdtExampleServer) Monitor(*User, CrdtExample_MonitorServer) error {
	return status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}

func RegisterCrdtExampleServer(s *grpc.Server, srv CrdtExampleServer) {
	s.RegisterService(&_CrdtExample_serviceDesc, srv)
}

func _CrdtExample_IncrementGCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCounter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrdtExampleServer).IncrementGCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.example.crdts.CrdtExample/IncrementGCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrdtExampleServer).IncrementGCounter(ctx, req.(*UpdateCounter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrdtExample_GetGCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrdtExampleServer).GetGCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.example.crdts.CrdtExample/GetGCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrdtExampleServer).GetGCounter(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrdtExample_UpdatePNCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCounter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrdtExampleServer).UpdatePNCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.example.crdts.CrdtExample/UpdatePNCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrdtExampleServer).UpdatePNCounter(ctx, req.(*UpdateCounter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrdtExample_GetPNCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrdtExampleServer).GetPNCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.example.crdts.CrdtExample/GetPNCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrdtExampleServer).GetPNCounter(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrdtExample_MutateGSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutateSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrdtExampleServer).MutateGSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.example.crdts.CrdtExample/MutateGSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrdtExampleServer).MutateGSet(ctx, req.(*MutateSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrdtExample_GetGSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrdtExampleServer).GetGSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.example.crdts.CrdtExample/GetGSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrdtExampleServer).GetGSet(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrdtExample_MutateORSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutateSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrdtExampleServer).MutateORSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.example.crdts.CrdtExample/MutateORSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrdtExampleServer).MutateORSet(ctx, req.(*MutateSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrdtExample_GetORSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrdtExampleServer).GetORSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.example.crdts.CrdtExample/GetORSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrdtExampleServer).GetORSet(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrdtExample_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrdtExampleServer).Connect(m, &crdtExampleConnectServer{stream})
}

type CrdtExample_ConnectServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type crdtExampleConnectServer struct {
	grpc.ServerStream
}

func (x *crdtExampleConnectServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _CrdtExample_Monitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrdtExampleServer).Monitor(m, &crdtExampleMonitorServer{stream})
}

type CrdtExample_MonitorServer interface {
	Send(*OnlineStatus) error
	grpc.ServerStream
}

type crdtExampleMonitorServer struct {
	grpc.ServerStream
}

func (x *crdtExampleMonitorServer) Send(m *OnlineStatus) error {
	return x.ServerStream.SendMsg(m)
}

var _CrdtExample_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.example.crdts.CrdtExample",
	HandlerType: (*CrdtExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncrementGCounter",
			Handler:    _CrdtExample_IncrementGCounter_Handler,
		},
		{
			MethodName: "GetGCounter",
			Handler:    _CrdtExample_GetGCounter_Handler,
		},
		{
			MethodName: "UpdatePNCounter",
			Handler:    _CrdtExample_UpdatePNCounter_Handler,
		},
		{
			MethodName: "GetPNCounter",
			Handler:    _CrdtExample_GetPNCounter_Handler,
		},
		{
			MethodName: "MutateGSet",
			Handler:    _CrdtExample_MutateGSet_Handler,
		},
		{
			MethodName: "GetGSet",
			Handler:    _CrdtExample_GetGSet_Handler,
		},
		{
			MethodName: "MutateORSet",
			Handler:    _CrdtExample_MutateORSet_Handler,
		},
		{
			MethodName: "GetORSet",
			Handler:    _CrdtExample_GetORSet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _CrdtExample_Connect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Monitor",
			Handler:       _CrdtExample_Monitor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "crdts/crdt-example.proto",
}
